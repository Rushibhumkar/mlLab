
In [1]: inport pandas as pd
inport matplotlib.pyplot as plt
fron sklearn. Linear model import LogisticRegression
fron sklearn.model selection import train test split
from sklearn.netrics inport accuracy score

In [2]: # Load the dataset
data = pd.read csv('Salary Data.csv')

In [3]: # Split the data into features (X) and Labels (y)
X= data.iloc[t, :-1].values
y = data. iloc:, -1] values

In [4]: # Split the data into training and testing sets
A train, X test, y train, y fest = train test split(X, y, test size=0.2, random state=42)

In [5]: # Create and train the logistic regression model
model = LogisticRegression()
model. fit(X train, y_ train)

C:\ProgramData\anaconda3\1lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge
(status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
https: //scikit-learn.org/stable/modules/preprocessing. html
Please also refer to the documentation for alternative solver options:
https: //scikit-learn.org/stable/modules/linear_model.html#logistic-regression
n_iter i = _check optimize result(

out[5]: |, LogisticRegression

LogisticRegression()

In [6]: # Predict the labels for the test set
y_pred = model.predict(X_test)

In [7]: # Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:”, accuracy)

Accuracy: .0
In [8]: # Plot the logistic regression model
plt.scatter(X_train, y train, color="blue’, label='Training Data')
plt.scatter(X_test, y test, color="green’, label='Testing Data’)
plt.plot(X test, model.predict(X test), color="red’, linewidth=2, label='Predicted Salary")
plt.xlabel( years of Experience’)
plt.ylabel( salary")
plt.title('simple Logistic Regression’)
plt.legend()

plt.show()
Simple Logistic Regression
1200004 ® Training Data L
® Testing Data ° LJ
— Predicted Salary Ld
[]
100000
2
£2 80000 A
&
60000
L]
]
400001 eo ° [ J
2 4 6 8 10

Years of Experience
